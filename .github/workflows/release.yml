name: Release

on:
  push:
    branches: [ release, release/* ] # Trigger on release branch(es)
  workflow_dispatch: # Allows manual trigger from any branch

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.gitversion.outputs.fullSemVer }}
      simple-version: ${{ steps.gitversion.outputs.semVer }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history needed
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.x' # Adjust to your .NET version
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4.0.1
      with:
        versionSpec: '6.3.x'
    
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v4.0.1
    
    - name: Display GitVersion outputs
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Run TUNIT tests
      run: dotnet test --no-build --configuration Release
    
    - name: Pack NuGet packages
      run: |
        dotnet pack --no-build --configuration Release \
          --output ./packages \
          -p:PackageVersion=${{ steps.gitversion.outputs.fullSemVer }} \
          -p:Version=${{ steps.gitversion.outputs.assemblySemVer }} \
          -p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} \
          -p:FileVersion=${{ steps.gitversion.outputs.assemblySemVer }} \
          -p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg
  
  publish-nuget:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./packages
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'
    
    - name: Publish to NuGet
      run: |
        dotnet nuget push "./packages/*.nupkg" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
  
  github-release:
    needs: [build-and-test, publish-nuget]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./packages
    
    - name: Create source archive
      run: |
        # Create a clean source archive excluding build artifacts
        git archive --format=zip --output=./packages/source-v${{ needs.build-and-test.outputs.simple-version }}.zip HEAD
        git archive --format=tar.gz --output=./packages/source-v${{ needs.build-and-test.outputs.simple-version }}.tar.gz HEAD
    
    - name: Generate Release Notes
      id: release_notes
      run: |
        # Generate basic release notes from commits since last release tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null || echo "")
        
        echo "## What's Changed" > release_notes.md
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
        else
          echo "- Initial release" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## NuGet Package" >> release_notes.md
        echo "This release is available on NuGet:" >> release_notes.md
        echo '```' >> release_notes.md
        echo "dotnet add package TvdbClient --version ${{ needs.build-and-test.outputs.version }}" >> release_notes.md
        echo '```' >> release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.build-and-test.outputs.simple-version }}
        name: Release v${{ needs.build-and-test.outputs.simple-version }}
        body_path: release_notes.md
        files: |
          ./packages/*.nupkg
          ./packages/*.zip
          ./packages/*.tar.gz
        draft: false
        prerelease: ${{ contains(needs.build-and-test.outputs.version, '-') }}
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}